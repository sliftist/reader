todonext

Switch to aigrow interface


Use up our monthly usage
    - A story with space travel. A female pilot stranded, and discovering strange things in space.
        - CLI
            - Copy from our extension output to another file
            - CLI to split the text into speakers
                - Modifies it inline
            - Another CLI to generate audio
                - Also modified it inline, injecting paths to audio (which is stored in a side-by-side cache folder, with random ids)
            - Another CLI to play the audio
            - Then support setting narration to use another AI, so we can use this when we don't have 50K unused tokens burning a hole in our pocket (which is only really 100 minutes of narration, so... not even that much...)


9) ElevenLabs model dropdown selector
    - Compare turbo and see if it's passable

10) Local model runner
    - Via providing local port?
    - We'll have to make sure this works even if we are running it on a real site
    - Eleven labs is too expensive! Over a dollar per 1000 tokens!

10) Pass previous and next text

11) Audio sometimes stops before fully reading through
    - Add some logging for times when we generate, play, and finish, to help start diagnosing it

10.1) Allow a model for speaking, and a model for narration
    - Store character count in segments, show the count for narrator vs speaking. This will let us know the fraction we will be saving by using a cheap model for the narrator

11) Test all voices, and remove bad voices (the ad voices)




5) Get rid of "notAudible", it's not needed
6) Change from "speaker" to something else
    AND change it so we assume each paragraph will solely contain narration + a speaker
    - Ideas:
        source
        voice
        owner
    - "narrator" will be hardcoded for narrator

8) Split audio so it associated with each segment, instead of flat
8.1) Button to regenerate per segment
8.2) Allow editting of segments directly
    - If a segment is out of date with the audio, indicate this in the UI
    - When we regnerate the audio, if if any segments are out of date, just generate those. If none are, then regenerate all of them.


6) Support a syntax for paragraphs which specifies the speaker directly
    Tracy :: What's going on?
    narrator :: Trace was very confused.
    - The syntax is, if there is a :: in the first 10 words
    - This is used when segmenting, skipping asking the ai
8) Test instructing the AI to directly set speakers, splitting up paragraphs by them?
    - Might create better stories, so it is more like an audio drama



9) Assign speaker's persistent hues, so we can try to make sure the colors vary more


10) Custom voices
    - Do voices we add in the site show up in our voices?
    - Try to add some library voices.
    - Try to add our voice, or... other voices.


11) Better looking UI
    - colors, especially


Advanced Features
    Maybe... a vs code UI, where we auto-scroll to match the two windows? Hmm...

    Two column display
        - Outline => output model, instead of chat
        - Two colums of textboxes on each size, which grow to the text size
            - Two new lines make a new textbox
        - The focused textbox is always in the center, with the corresponding output beside it (in the other column)
            - The other boxes are rendered tightly packed
        - Page up / page down move between textboxes?

    Variable support
        - Mostly for common prompt templates

    Variables work in series, but also search other books (in which case they are just what the book exports, which is everything, but default)
        - Exports have timestamp of the first message that set the latest value
        - If it's is another book a button to copy from the other book is shown (for each other unique version, showing the FIRST book to have that version)
            - Also an option to copy TO all the other versions of it, mostly to reduce all of the duplicate buttons
            - Maybe a button to explicitly mark it as "no-import", to make the UI go away, as it might be annoying

    Variable parameters

        @detailed_person(Ralph)
        @detailed_person(@protagonist)

        <add detail to $0>@detailed_person
    We could also support variables with parameters, for the purpose of choosing the context we query

    Default variables
        @prevParagraph
        @nextParagraph

    THIRD column, for chaining prompts, so we don't have to write the wrapping code each time
        - Copies from previous when we new paragraph is created
            - Detects identical and partial opacities, so we can ignore it most of the time
        - Collapsable?

        @history_context
        @detailed_action_instructions
        @weather_and_temperature_reminder
        @no_pathetic_fallacy
        @prevParagraphContext
        @futureParagraphContext
        @paragraph
        @subject_reminder

        AND, prevParagraph/nextParagraph will reference the NON context template parts, so they can be cleaner


    Nested prompts, evaluated first
        <{get the subject from @paragraph, @singlewordoutput}>@subject
            - As in, the text inside the brace is evaluated, with the variables, etc, and then is placed there, which sets the subject

        NOTE: If you just want to give directions, that can be done inline, such as *AI, please add description of the room here*, although that is probably best put in a variable, so that can be reused.

    Wrapping prompts for detail-expanded code?
        @per_paragraph("./source.txt",`
            @very_descriptive
            add description to @pargraph
        `)

    Better context
        - Dynamically determine embedding query with AI
        - Search other books, etc
        - Use AI to filter context future
        - Tab to see context for any prompt

    Summarization with further columns
        - Allow adding more columns
            - I guess only 1 or 2 summarization columns can be visible. Anymore and it just gets ridiculous
        - Apply nested summarization code
            - Automatically keep it update it for > 2 paragraphs old
        - This allows us to navigate via summaries at any level
        - Allow referencing this in the context?

    Specific extraction for context
        - Places, characters, etc

    10) Special audio transform so we can distinguish internal monologue, while still making it sound like a character
        - Echo?
        - Muffled?

    9) Use some kind of break/phoneme syntax, which we convert to the elevenlabs syntax / other syntax
        - Maybe just... ipa, and then detect it when we are passing it to eleven labs
            - Breaks as well?
    8) AI transform step to add breaks and phonemes
        "Give me one second to think about it." <break time="1.0s" /> "Yes, that would work."
        <phoneme alphabet="ipa" ph="ˈæktʃuəli">actually</phoneme>

    6) Support saving/restoring data from google drive
        - And maybe auto saving it every... day? Or week?

    7) Conditional parts
        @if(@paragraph has dialogue, "preserve all dialogue, adding if necessary")

    8) Dynamically include list of ideas
        - Basically, so many conditionals that we put them in a database, using embeddings / ai to decide which instructions to include.

    9) Voice => text input
        - Automatic interruption of spoken outputs
        - Combining multiple responses to fine-tune an input ("no, not that", etc), so we can create one cohesive story.


Use eslint-plugin-no-disposable-without-using